{
    "codeformatter_php_options":
    {
        "indent_size": 4, // Indent size
        "indent_with_tabs": false, // Indent with tabs or spaces
        "indent_style": "k&r", // Indent the code in k&r, allman, gnu or whitesmiths style
        // Add new lines after o before specific contents The settings are 'before' and 'after'. As value, use a comma separated list of contents or tokens:
        "new_line_before": "switch,while,for,foreach,try,case,do,goto,namespace,T_INTERFACE,return,continue,endfor,endforeach,endif,endswitch,endwhile,break,throw",
        "new_line_after": "",
        "format_array_nested": true, // Indent the array structures Ex.
        "pear": true, // Format the code to make it compatible with PEAR Coding Standards
        "pear_add_header": "", // Add one of the standard PEAR comment header (php, bsd, apache, lgpl, pear) or any file as licence header.
        // Two extra options allows to break the spec about newline before braces on function and classes:
        "pear_newline_class": true,
        "pear_newline_function": true,
        "lowercase": true, // Lowercase all control structures. Such as TRUE, FALSE, SWITCH and more
        "fluent": false, // Create fluent style for multi-level object access.
        "list_class_function": false, // Create a list of functions and classes in the script By default, this Filter puts the list at the beggining of the script.
        "equals_align": false, // Align the equals symbols in contiguous lines.
        "phpbb": false // Format the code to make it compatible with phpBB Coding Standards
    },

    "codeformatter_js_options":
    {
        "indent_size": 4, // indentation size
        "indent_with_tabs": false, // Indent with tabs or spaces
        "preserve_newlines": true, // whether existing line breaks should be preserved,
        "max_preserve_newlines": 2, // maximum number of line breaks to be preserved in one chunk
        "jslint_happy": false, // if true, then jslint-stricter mode is enforced. Example function () vs function()
        "brace_style": "collapse", // "collapse" | "expand" | "end-expand". put braces on the same line as control statements (default), or put braces on own line (Allman / ANSI style), or just put end braces on own line.
        "keep_array_indentation": false // keep array identation.
    },

    "codeformatter_html_options":
    {
        "indent_size": 1, // indentation size
        "indent_with_tabs": false, // Indent with tabs or spaces
        "max_char": 80, // maximum amount of characters per line,
        "brace_style": "collapse", // "collapse" | "expand" | "end-expand". put braces on the same line as control statements (default), or put braces on own line (Allman / ANSI style), or just put end braces on own line.
        "unformatted": ["a"] // list of tags, that shouldn't be reformatted. Example["a", "sub", "sup", "b", "i", "u"]
    },

    "codeformatter_css_options":
    {
        "indent_with_tab": true, // Indent with tabs or spaces
        "openbrace": "end-of-line" // "end-of-line" | "expand". put braces on the same line as control statements (default), or put braces on own line (Allman / ANSI style).
    },
    "codeformatter_python_options":
    {
        "indent_size": 1, // indentation size
        "indent_with_tabs": false, // Indent with tabs or spaces
        "max_char": 80, // Width of output lines in characters.
        "assignment": " = ", // This is how the assignment operator is to appear.
        "function_param_assignment": "=", // This is how function-parameter assignment should appear.
        "function_param_sep": ", ", // This is how function parameters are separated.
        "list_sep": ", ", // This is how list items are separated.
        "subscript_sep": "=", // This is how subscripts are separated.
        "dict_colon": ": ", // This separates dictionary keys from values.
        "slice_colon": ":", // this separates the start:end indices of slices.
        "comment_prefix": "# ", // This is the sentinel that marks the beginning of a commentary string.
        "shebang": "#!/usr/bin/env python", // Hashbang, a line-one comment naming the Python interpreter to Unix shells.
        "boilerplate": "", // Standard code block (if any). This is inserted after the module doc string on output.
        "blank_line": "", // This is how a blank line is to appear (up to the newline character).
        "keep_blank_lines": true, // If true, preserve one blank where blank(s) are encountered.
        "add_blank_lines_around_comments": true, // If true, set off comment blocks with blanks.
        "add_blank_line_after_doc_string": true, // If true, add blank line after doc strings.
        "max_seps_func_def": 3, // Split lines containing longer function definitions.
        "max_seps_func_ref": 5, // Split lines containing longer function calls.
        "max_seps_series": 5, // Split lines containing longer lists or tuples.
        "max_seps_dict": 3, // Split lines containing longer dictionary definitions.
        "max_lines_before_split_lit": 2, // Split string literals containing more newline characters.
        "left_margin": "", // This is how the left margin is to appear.
        "normalize_doc_strings": false, // If true, normalize white space in doc strings.
        "leftjust_doc_strings": false, // If true, left justify doc strings.
        "wrap_doc_strings": false, // If true, wrap doc strings to max_char.
        "leftjust_comments": false, // If true, left justify comments.
        "wrap_comments": false, // If true, wrap comments to max_char.
        "double_quoted_strings": false, // If true, use quotes instead of apostrophes for string literals.
        "single_quoted_strings": false, // If true, use apostrophes instead of quotes for string literals.
        "can_split_strings": false, // If true, longer strings are split at the max_char.
        "doc_tab_replacement": "....", // This literal replaces tab characters in doc strings and comments.

        // Optionally preserve unassigned constants so that code to be tidied
        // may contain blocks of commented-out lines that have been no-op'ed
        // with leading and trailing triple quotes.  Python scripts may declare
        // constants without assigning them to a variables, but CodeFormatter
        // considers this wasteful and normally elides them.
        "keep_unassigned_constants": false,

        // Optionally omit parentheses around tuples, which are superfluous
        // after all.  Normal CodeFormatter behavior will be still to include them
        // as a sort of tuple display analogous to list displays, dict
        // displays, and yet-to-come set displays.
        "parenthesize_tuple_display": true,

        // When CodeFormatter splits longer lines because max_seps
        // are exceeded, the statement normally is closed before the margin is
        // restored.  The closing bracket, brace, or parenthesis is placed at the
        // current indent level.  This looks ugly to "C" programmers.  When
        // java_style_list_dedent is True, the closing bracket, brace, or
        // parenthesis is brought back left to the indent level of the enclosing
        // statement.
        "java_style_list_dedent": false
    }


}
